/**
 * {{{name}}} Worker Context
 *
 * @module {{{projectName}}}/app/worker/context/{{{nameLower}}}
 * @author {{{author}}}
 */

var util    = require('util');
var express = require('express');

/**
 * @constructor
 */
var {{{name}}}Context = function()
{
    // Call the super constructor
    {{{name}}}Context.super_.call(this, __filename);

    // Worker context description.
    this.description = '{{{description}}}';

    // Worker context backends configuration.
    // Setting this value to null no database
    // connection will be established. Setting
    // this value to an empty object will load
    // all connections of all backends. You can
    // add an "mysql" property with an array with
    // the names of your connections, so we will
    // only load them. An empty array for an property
    // will load all connections of the given backend.
    this.backends = {};

    // Worker context modules configuration.
    this.modules = [{{{modules}}}];
}

/**
 * Extend the Greppy framework worker context
 */
util.inherits({{{name}}}Context, greppy.get('app.worker.context'));

/**
 * Worker context pre configure method.
 *
 * @param {Object} app - The application object
 * @param {Object} server - Server object
 * @param {Function} callback - Function to call on finish
 */
{{{name}}}Context.prototype.preConfigure = function(app, server, callback)
{
    // // Use the body parser parts
    // // The bodyParser will be removed with connect 3.0
    // app.use(express.json());
    // app.use(express.urlencoded());

    callback && callback();
};

/**
 * Worker context configure method.
 *
 * @param {Object} app - The application object
 * @param {Object} server - Server object
 * @param {Function} callback - Function to call on finish
 */
{{{name}}}Context.prototype.configure = function(app, server, callback)
{
    // Templating Engine
    app.set('views', process.cwd() + '/modules/{{{nameLower}}}/resources/views/');
    app.set('view engine', 'jade');
    app.locals.pretty = true;

    // Common Middleware
    app.use(express.compress());
    app.use(express.static(process.cwd() + '/public'));

    // Start listening for connections
    server.listen({{{port}}});

    callback && callback();
};

/**
 * Worker context post configure method.
 *
 * @param {Object} app - The application object
 * @param {Object} server - Server object
 * @param {Function} callback - Function to call on finish
 */
{{{name}}}Context.prototype.postConfigure = function(app, server, callback)
{
    // // Add 404 error handler
    // app.use(function(req, res, next) {
    //     res.render('error/notfound-layout');
    // });

    // // Add error handler middleware
    // app.use(function(err, req, res, next) {
    //     logger.error(err.stack);
    //     res.status(500);
    //     res.render('error/catch-all', { error: err });
    // });

    callback && callback();
};

module.exports = {{{name}}}Context;

