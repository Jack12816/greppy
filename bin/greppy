#!/usr/bin/env node

/**
 * Greppy CLI
 *
 * @module greppy/cli
 * @author Hermann Mayer <hermann.mayer92@gmail.com>
 */

fs             = require('fs');
path           = require('path');
async          = require('async');
colors         = require('colors');
childProcess   = require('child_process');
daemon         = require('daemon');
_              = require('lodash-node');
Table          = require('tab');
commandHelper  = require('./helper/command');
projectHelper  = new (require('../lib/helper/project'))();
processHelper  = new (require('../lib/helper/process'))();
pathHelper     = new (require('../lib/helper/path'))();
argumentHelper = new (require('../lib/helper/argument'))();

// Load greppy datatype extensions
require('./../lib/extension/datatype/array');
require('./../lib/extension/datatype/number');
require('./../lib/extension/datatype/string');

// Unlimit process EventEmitter listeners to
// avoid warnings for this console application
process.setMaxListeners(0);

// Create a default table
table = new Table.TableOutputStream({
    omitHeader: true,
    columns: [
        {align: 'right', width: 32},
        {align: 'left'}
    ]
});

var getopt = require('node-getopt').create([
    ['n', 'new APP_NAME', 'Create a new application in cwd/APP_NAME'],
    ['s', 'start', 'Start the configured application ((non-)clustered)'],
    ['k', 'stop', 'Stop the whole application or explicit modules'],
    ['r', 'restart', 'Restart the whole application or explicit modules'],
    ['e', 'reload', 'Just reload workers of running contexts'],
    ['m', 'status', 'Check the status of the whole application'],
    ['l', 'list', 'List (all|given) application worker contexts,\n                      use in combination with the debug flag for debugging information'],
    ['d', 'debug', 'Debug flag to start a context in foreground'],
    ['f', 'force', 'Can be used in combination with start'],
    ['', 'db', 'Database operations namespace'],
    ['', 'generate', 'Scaffolding operations namespace'],
    ['', 'assets', 'Assets operations namespace'],
    ['h', 'help', 'Display this help or the help of a namespace eg. -h --db'],
    ['v', 'version', 'Show version']
]);

getopt.setHelp(
  "Usage: greppy [OPTION]\n" +
  "\n" +
  "[[OPTIONS]]\n" +
  "\n" +
  "Installation: npm install -g greppy\n" +
  "Respository:  https://github.com/Jack12816/greppy"
);

// Parse the given process args
var opts = getopt.parseSystem();

// Run the selected command
(function() {

    var debug = (opts.options.hasOwnProperty('debug')) ? true : false;
    var force = (opts.options.hasOwnProperty('force')) ? true : false;

    // Db namespace command
    if (opts.options.hasOwnProperty('db')) {
        require('./command/db').run(opts);
        return;
    }

    // Generate namespace command
    if (opts.options.hasOwnProperty('generate')) {
        require('./command/generate').run(opts);
        return;
    }

    // Assets namespace command
    if (opts.options.hasOwnProperty('assets')) {
        require('./command/assets').run(opts);
        return;
    }

    // Without args print the help
    if (0 === Object.keys(opts.options).length || opts.options.hasOwnProperty('help')) {
        getopt.showHelp();
        return;
    }

    // Version command
    if (opts.options.hasOwnProperty('version')) {
        require('./command/version').run(opts);
        return;
    }

    // New command
    if (opts.options.hasOwnProperty('new')) {
        require('./command/new').run(opts);
        return;
    }

    // Start command
    if (opts.options.hasOwnProperty('start')) {
        require('./command/start').run(opts.argv, debug);
        return;
    }

    // Stop command
    if (opts.options.hasOwnProperty('stop')) {
        require('./command/stop').run(opts.argv, force);
        return;
    }

    // Restart command
    if (opts.options.hasOwnProperty('restart')) {
        require('./command/stop').run(opts.argv, function() {
            require('./command/start').run(opts.argv);
        });
        return;
    }

    // Reload command
    if (opts.options.hasOwnProperty('reload')) {
        require('./command/reload').run(opts.argv);
        return;
    }

    // Status command
    if (opts.options.hasOwnProperty('status')) {
        require('./command/status').run();
        return;
    }

    // List command
    if (opts.options.hasOwnProperty('list')) {
        require('./command/list').run(opts.argv, debug);
        return;
    }

}());

